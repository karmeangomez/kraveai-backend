name: üöÄ Despliegue Seguro KraveAI

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: üîê Despliegue en Raspberry Pi
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: üìÖ Clonar Repositorio
        uses: actions/checkout@v4

      - name: üîê Generar archivo .env plano
        shell: bash
        run: |
          mkdir -p secure_config
          {
            echo "IONOS_EMAIL=${{ secrets.IONOS_EMAIL }}"
            echo "IONOS_PASSWORD=${{ secrets.IONOS_PASSWORD }}"
            echo "IONOS_USER=${{ secrets.IONOS_USER }}"
            echo "IONOS_PASS=${{ secrets.IONOS_PASS }}"
            echo "MAILBOXVALIDATOR_KEY=${{ secrets.MAILBOXVALIDATOR_KEY }}"
            echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}"
            echo "TELEGRAM_CHAT_ID=${{ secrets.TELEGRAM_CHAT_ID }}"
            echo "WEBSHARE_API_KEY=${{ secrets.WEBSHARE_API_KEY }}"
            echo "CRYPTO_KEY=NA"
            echo "CRYPTO_IV=NA"
          } > secure_config/.env

      - name: üöÄ Transferir .env a Raspberry Pi
        uses: appleboy/scp-action@v0.1.5
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: secure_config/.env
          target: ~/kraveai-backend/
          overwrite: true

      - name: üõ† Ejecutar despliegue
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -e

            echo "üì¶ Iniciando despliegue en $(hostname)"
            cd ~/kraveai-backend

            git fetch origin main
            git reset --hard origin/main
            npm install --omit=dev

            echo "‚úÖ Archivo .env recibido:"
            cat .env | grep -E 'TELEGRAM|WEBSHARE|IONOS'

            echo "üîÑ Actualizando proxies de Webshare..."
            export NODE_OPTIONS="--no-warnings"
            node -e "import('./src/proxies/webshareApi.js').then(m => m.default.refreshProxies().catch(e => { 
              console.error('‚ùå Error cr√≠tico:', e); 
              process.exit(1);
            }))"

            echo "üîÅ Reiniciando servicios..."
            sudo systemctl restart kraveai-python.service
            sudo systemctl restart crear-cuentas.service

            echo "üåê Estado t√∫nel Cloudflare:"
            if sudo systemctl is-active --quiet cloudflared.service; then
              echo "‚úÖ T√∫nel activo"
            else
              echo "‚ö†Ô∏è Reiniciando t√∫nel inactivo"
              sudo systemctl restart cloudflared.service
              sleep 5
              sudo systemctl status cloudflared.service --no-pager
            fi

            echo "ü©∫ Verificando salud del backend..."
            HEALTH_RESPONSE=$(curl -sSf http://localhost:8000/health || echo '{"status":"ERROR"}')
            echo "Respuesta: $HEALTH_RESPONSE"

            if echo "$HEALTH_RESPONSE" | grep -q '"status":"OK"'; then
              mensaje="‚úÖ *KraveAI actualizado con √©xito*\n‚Ä¢ Hora: $(date '+%H:%M')\n‚Ä¢ Proxies: Actualizados\n‚Ä¢ Backend: Funcionando"
              status=0
            else
              mensaje="‚ö†Ô∏è *Error en despliegue*\n‚Ä¢ Hora: $(date '+%H:%M')\n‚Ä¢ Problema: Health check fall√≥\n‚Ä¢ Acci√≥n: Revisar logs"
              status=1
            fi

            echo "üì® Enviando notificaci√≥n a Telegram..."
            source .env
            curl -X POST https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage \
              -d chat_id="$TELEGRAM_CHAT_ID" \
              -d text="$mensaje" \
              -d parse_mode="Markdown" \
              --silent --show-error

            exit $status
