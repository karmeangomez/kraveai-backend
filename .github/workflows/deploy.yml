name: üöÄ Despliegue Seguro KraveAI v2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: üîê Despliegue en Raspberry Pi
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: üìÖ Clonar Repositorio
        uses: actions/checkout@v4

      - name: üîê Generar archivo .env
        shell: bash
        run: |
          mkdir -p secure_config
          {
            echo "# CONFIGURACI√ìN PRINCIPAL"
            echo "HEADLESS=true"
            echo "PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium-browser"
            
            echo "# INSTAGRAM CONFIG"
            echo "INSTAGRAM_USERNAME=${{ secrets.INSTAGRAM_USERNAME }}"
            echo "INSTAGRAM_PASSWORD=${{ secrets.INSTAGRAM_PASSWORD }}"
            echo "INSTAGRAM_ACCOUNT_CREATION_LIMIT=50"
            
            echo "# WEBSHARE RESIDENTIAL PROXY"
            echo "WEBSHARE_RESIDENTIAL_USER=${{ secrets.WEBSHARE_RESIDENTIAL_USER }}"
            echo "WEBSHARE_RESIDENTIAL_PASS=${{ secrets.WEBSHARE_RESIDENTIAL_PASS }}"
            
            echo "# TELEGRAM"
            echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}"
            echo "TELEGRAM_CHAT_ID=${{ secrets.TELEGRAM_CHAT_ID }}"
            
            echo "# EMAIL VERIFICATION"
            echo "IONOS_EMAIL=${{ secrets.IONOS_EMAIL }}"
            echo "IONOS_PASSWORD=${{ secrets.IONOS_PASSWORD }}"
            echo "MAILBOXVALIDATOR_KEY=${{ secrets.MAILBOXVALIDATOR_KEY }}"
            
            echo "# SSH CONFIG (opcional)"
            echo "SSH_HOST=${{ secrets.SSH_HOST }}"
            echo "SSH_USER=${{ secrets.SSH_USER }}"
            echo "SSH_PRIVATE_KEY=${{ secrets.SSH_PRIVATE_KEY }}"
          } > secure_config/.env

      - name: üöÄ Transferir .env a Raspberry Pi
        uses: appleboy/scp-action@v0.1.5
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT || '22' }}
          source: secure_config/.env
          target: ~/kraveai-backend/
          overwrite: true

      - name: üõ† Ejecutar despliegue
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT || '22' }}
          script: |
            set -e
            echo "üì¶ Iniciando despliegue en $(hostname)"
            cd ~/kraveai-backend
            
            # Actualizar c√≥digo
            git fetch origin main
            git reset --hard origin/main
            
            # Instalar dependencias
            npm install --omit=dev
            
            # Eliminar cach√©s antiguas de proxies
            rm -f src/proxies/*.json
            
            echo "‚úÖ Variables cr√≠ticas:"
            grep -E 'INSTAGRAM|WEBSHARE|TELEGRAM|IONOS|HEADLESS' .env
            
            echo "üîÑ Reiniciando servicios..."
            sudo systemctl restart kraveai-python.service
            sudo systemctl restart crear-cuentas.service
            
            echo "üåê Verificando estado del t√∫nel Cloudflare..."
            sudo systemctl restart cloudflared.service
            sleep 3
            sudo systemctl status cloudflared.service --no-pager
            
            echo "üß™ Ejecutando prueba de salud..."
            HEALTH_RESPONSE=$(curl -sSf http://localhost:8000/health || echo '{"status":"ERROR"}')
            echo "Respuesta: $HEALTH_RESPONSE"
            
            if echo "$HEALTH_RESPONSE" | grep -q '"status":"OK"'; then
              MENSAJE="‚úÖ *KraveAI actualizado con √©xito*\n‚Ä¢ Hora: $(date '+%H:%M')\n‚Ä¢ Proxies: Residencial configurado\n‚Ä¢ Instagram: Cuenta lista"
              STATUS=0
              
              # Verificaci√≥n adicional de Instagram
              echo "üß™ Probando conexi√≥n con Instagram..."
              INSTA_TEST=$(curl -s -o /dev/null -w "%{http_code}" https://www.instagram.com || echo "500")
              if [ "$INSTA_TEST" == "200" ]; then
                echo "‚úÖ Instagram accesible"
              else
                MENSAJE="$MENSAJE\n‚ö†Ô∏è Instagram no accesible (c√≥digo $INSTA_TEST)"
                echo "‚ö†Ô∏è Instagram no accesible (c√≥digo $INSTA_TEST)"
              fi
            else
              MENSAJE="‚ö†Ô∏è *Error en despliegue*\n‚Ä¢ Hora: $(date '+%H:%M')\n‚Ä¢ Problema: Health check fall√≥\n‚Ä¢ Acci√≥n: Revisar logs"
              STATUS=1
            fi
            
            echo "üì® Enviando notificaci√≥n a Telegram..."
            source .env
            curl -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
              -d "chat_id=$TELEGRAM_CHAT_ID" \
              -d "text=$MENSAJE" \
              -d "parse_mode=Markdown" \
              --silent --show-error
            
            # Prueba r√°pida de creaci√≥n de cuenta
            echo "üöÄ Iniciando prueba de creaci√≥n de cuenta..."
            TEST_RESULT=$(timeout 60 node -e "import('./src/accounts/crearCuentaInstagram.js').then(m => m.crearCuentaTest()).catch(e => console.error('‚ùå Error prueba:', e))" || echo "Timeout")
            echo "Resultado prueba: $TEST_RESULT"
            
            if [ "$TEST_RESULT" != "Timeout" ] && [ -n "$TEST_RESULT" ]; then
              curl -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
                -d "chat_id=$TELEGRAM_CHAT_ID" \
                -d "text=üß™ *Prueba creaci√≥n cuenta:*\n$TEST_RESULT" \
                -d "parse_mode=Markdown" \
                --silent --show-error
            fi
            
            exit $STATUS
