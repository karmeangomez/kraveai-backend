Gracias por compartir los logs y el c√≥digo de referencia a las 01:13 AM CST del 4 de junio de 2025. Los documentos que proporcionaste (mensajes de Google Search y JavaScript no disponible en x.com) sugieren que el problema podr√≠a estar relacionado con la detecci√≥n de bots o la deshabilitaci√≥n de JavaScript por parte de Instagram o un navegador simulado por Puppeteer, pero los logs que compartiste son m√°s espec√≠ficos y nos dan una pista clara: el error principal es ‚Äú‚ùå La p√°gina de login no se carg√≥ correctamente‚Äù con el mensaje ‚ÄúP√°gina de login no encontrada‚Äù. Esto indica que Puppeteer no est√° llegando a la p√°gina de login esperada de Instagram, y el servidor falla porque todos los intentos de login fallan.
An√°lisis del Problema
1. Logs Actuales
	‚Ä¢	El proceso inicia correctamente (üü¢ Iniciando servidor..., üöÄ Iniciando Puppeteer con Stealth...), y el mensaje de cookies se muestra como ‚ÑπÔ∏è, lo cual es correcto seg√∫n el c√≥digo actualizado.
	‚Ä¢	Sin embargo, al intentar acceder a https://www.instagram.com/accounts/login/, el t√≠tulo de la p√°gina es solo ‚Äúwww.instagram.com‚Äù en lugar de algo como ‚ÄúInstagram - Log In‚Äù, lo que sugiere que la p√°gina no carga completamente o redirige a una p√°gina diferente (posiblemente una de verificaci√≥n o error).
	‚Ä¢	Despu√©s de 5 intentos, el login falla (‚ùå Todos los intentos de login fallaron), y el servidor se detiene con ‚ùå Fallo al iniciar el servidor: Login fallido.
2. Causa Probable
	‚Ä¢	Detecci√≥n de Bot: Instagram est√° detectando que Puppeteer es un bot, lo que podr√≠a llevar a una p√°gina de verificaci√≥n de JavaScript o CAPTCHA. Esto explicar√≠a por qu√© el t√≠tulo no coincide con la p√°gina de login esperada.
	‚Ä¢	Timeout o Redirecci√≥n: El timeout de 20 segundos para goto podr√≠a no ser suficiente, o la p√°gina podr√≠a estar redirigiendo a una URL diferente (como una p√°gina de bloqueo).
	‚Ä¢	JavaScript Deshabilitado: Los documentos que compartiste sugieren que Instagram requiere JavaScript habilitado, y aunque Puppeteer lo tiene activado por defecto, la configuraci√≥n podr√≠a no ser suficiente para evitar detecciones.
3. C√≥digo de Referencia
El c√≥digo que proporcionaste como funcional tiene diferencias clave:
	‚Ä¢	Usa waitUntil: 'domcontentloaded' en lugar de 'load', lo que podr√≠a ser m√°s r√°pido y evitar esperar recursos pesados.
	‚Ä¢	Incluye referers aleatorios (referers) para simular tr√°fico humano, lo que podr√≠a ayudar a evadir detecciones.
	‚Ä¢	Usa networkidle2 para waitForNavigation, que espera hasta que solo haya 2 conexiones de red, lo que podr√≠a ser m√°s robusto para confirmar la navegaci√≥n.
	‚Ä¢	Almacena cookies por usuario en archivos individuales (e.g., ${username}.json) en lugar de un solo archivo cookie-memory.json.
Estas diferencias podr√≠an estar contribuyendo a que el c√≥digo anterior funcionara mejor.
Soluci√≥n
Vamos a combinar lo mejor del c√≥digo de referencia con las mejoras actuales:
	‚Ä¢	Usar domcontentloaded y networkidle2 para navegaci√≥n.
	‚Ä¢	A√±adir referers aleatorios.
	‚Ä¢	Aumentar timeouts y robustez.
	‚Ä¢	Ajustar la l√≥gica de cookies para usar archivos individuales por usuario, similar al c√≥digo funcional.
	‚Ä¢	Verificar si JavaScript est√° funcionando correctamente en la p√°gina.
C√≥digo Actualizado
`instagramLogin.js`
// ‚úÖ instagramLogin.js - M√≥dulo optimizado para login y scraping de Instagram con Puppeteer
const puppeteer = require('puppeteer-extra');
const StealthPlugin = require('puppeteer-extra-plugin-stealth');
const crypto = require('crypto');
const fs = require('fs').promises;
const path = require('path');
const UserAgent = require('user-agents');

puppeteer.use(StealthPlugin());

// üîë Configuraci√≥n de encriptaci√≥n y almacenamiento de cookies
const ENCRYPTION_KEY = process.env.ENCRYPTION_KEY || 'mi-clave-secreta-32-bytes-aqui1234';
const COOKIE_PATH = path.join(__dirname, 'cookies'); // Cambio a directorio relativo
const referers = [
  'https://www.google.com/search?q=instagram',
  'https://x.com/explore',
  'https://www.facebook.com',
];

// Cache en memoria para cookies y datos scrapeados
let cookieCache = {};
let scrapeCache = new Map();
const CACHE_TTL = 60 * 60 * 1000; // 1 hora

// Cargar cookies desde archivo al iniciar
async function loadCookieMemory() {
  try {
    await fs.mkdir(COOKIE_PATH, { recursive: true });
    const files = await fs.readdir(COOKIE_PATH);
    for (const file of files) {
      if (file.endsWith('.json')) {
        const username = file.replace('.json', '');
        const data = await fs.readFile(path.join(COOKIE_PATH, file), 'utf8');
        cookieCache[username] = JSON.parse(data);
        console.log(`‚úÖ Cookie memory cargado para ${username}`);
      }
    }
  } catch (err) {
    console.log(`‚ÑπÔ∏è Cookie memory no encontrado en ${COOKIE_PATH}, inicializando vac√≠o (normal en la primera ejecuci√≥n)`);
    cookieCache = {};
  }
}

// Guardar cookies en archivo al cerrar
async function saveCookieMemory() {
  try {
    await fs.mkdir(COOKIE_PATH, { recursive: true });
    for (const [username, cookies] of Object.entries(cookieCache)) {
      await fs.writeFile(path.join(COOKIE_PATH, `${username}.json`), JSON.stringify(cookies, null, 2));
      console.log(`‚úÖ Cookie memory guardado para ${username}`);
    }
  } catch (err) {
    console.error('‚ùå Error al guardar cookie memory:', err.message);
  }
}

// üîí Funci√≥n para encriptar la contrase√±a
function encryptPassword(password) {
  const iv = Buffer.from(crypto.randomBytes(16));
  const cipher = crypto.createCipheriv('aes-256-cbc', Buffer.from(ENCRYPTION_KEY), iv);
  let encrypted = cipher.update(password, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return { iv: iv.toString('hex'), encryptedData: encrypted };
}

// üîì Funci√≥n para desencriptar la contrase√±a
function decryptPassword(encryptedObj) {
  const decipher = crypto.createDecipheriv('aes-256-cbc', Buffer.from(ENCRYPTION_KEY), Buffer.from(encryptedObj.iv, 'hex'));
  let decrypted = decipher.update(encryptedObj.encryptedData, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// üåê Generar un User-Agent aleatorio
function getNextUserAgent() {
  const userAgent = new UserAgent({ deviceCategory: ['desktop', 'mobile'][Math.floor(Math.random() * 2)] });
  return userAgent.toString();
}

// üç™ Guardar cookies en memoria y archivo
async function saveCookies(page, username) {
  try {
    const cookies = await page.cookies();
    cookieCache[username] = cookies;
    await fs.writeFile(path.join(COOKIE_PATH, `${username}.json`), JSON.stringify(cookies, null, 2));
    console.log(`‚úÖ Cookies guardadas para ${username} en memoria y archivo`);
    return true;
  } catch (err) {
    console.error(`‚ùå Error al guardar cookies para ${username}:`, err.message);
    return false;
  }
}

// üç™ Cargar cookies desde memoria
async function loadCookies(page, username) {
  try {
    if (cookieCache[username]) {
      await page.setCookie(...cookieCache[username]);
      console.log(`‚úÖ Cookies cargadas para ${username} desde memoria`);
      return true;
    }
    console.log(`‚ÑπÔ∏è No se encontraron cookies en memoria para ${username}, intentando login`);
    return false;
  } catch (err) {
    console.error(`‚ùå Error al cargar cookies para ${username}:`, err.message);
    return false;
  }
}

// üîê Funci√≥n para realizar el login en Instagram con backoff exponencial
async function instagramLogin(page, username, encryptedPassword, maxRetries = 5) {
  let delay = 2000; // Retraso inicial de 2 segundos
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      console.log(`üîê Intento de login ${attempt}/${maxRetries} para ${username}`);

      // üç™ Intenta cargar cookies para evitar login
      const hasCookies = await loadCookies(page, username);
      if (hasCookies) {
        await page.goto('https://www.instagram.com/', { waitUntil: 'domcontentloaded', timeout: 20000 });
        const isLoggedIn = await page.evaluate(() => !!document.querySelector('a[href*="/direct/inbox/"]'));
        if (isLoggedIn) {
          console.log('‚úÖ Sesi√≥n activa encontrada, login omitido');
          await saveCookies(page, username);
          return true;
        }
      }

      // Simular tr√°fico humano con referer
      const referer = referers[Math.floor(Math.random() * referers.length)];
      console.log(`üåê Visitando referer: ${referer}`);
      await page.goto(referer, { waitUntil: 'domcontentloaded', timeout: 10000 }).catch(() => {});
      await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000));

      // üì≤ Accede a la p√°gina de login de Instagram
      console.log('üåê Accediendo a la p√°gina de login de Instagram');
      await page.goto('https://www.instagram.com/accounts/login/', { waitUntil: 'domcontentloaded', timeout: 20000 });
      const pageTitle = await page.title();
      console.log(`T√≠tulo de la p√°gina: ${pageTitle}`);
      if (!pageTitle.includes('Instagram') && !pageTitle.includes('Log In')) {
        console.error('‚ùå La p√°gina de login no se carg√≥ correctamente');
        throw new Error('P√°gina de login no encontrada');
      }

      // Retraso inicial para carga
      await new Promise(resolve => setTimeout(resolve, 3000));

      // üîç Verifica si hay un CAPTCHA
      const isCaptcha = await page.evaluate(() => !!document.querySelector('input[name="verificationCode"]'));
      if (isCaptcha) {
        console.warn('‚ö†Ô∏è CAPTCHA detectado, reintentando...');
        delay *= 2;
        await new Promise(resolve => setTimeout(resolve, delay));
        continue;
      }

      // Esperar din√°micamente el formulario de login
      console.log('Esperando campos de login...');
      await page.waitForSelector('input[name="username"]', { timeout: 40000 });
      await page.waitForSelector('input[name="password"]', { timeout: 40000 });
      console.log('‚úÖ Campos de login encontrados');

      // Simular movimiento de mouse para parecer humano
      await page.mouse.move(100 + Math.random() * 200, 100 + Math.random() * 200, { steps: 10 });

      // üîì Desencripta la contrase√±a y realiza el login
      const password = decryptPassword(encryptedPassword);
      await page.type('input[name="username"]', username, { delay: 100 + Math.random() * 50 });
      await page.type('input[name="password"]', password, { delay: 100 + Math.random() * 50 });

      await page.click('button[type="submit"]');
      console.log('Formulario enviado, esperando navegaci√≥n...');
      await page.waitForNavigation({ waitUntil: 'networkidle2', timeout: 30000 });

      // ‚úÖ Verifica si el login fue exitoso
      const isLoggedIn = await page.evaluate(() => !!document.querySelector('a[href*="/direct/inbox/"]'));
      if (isLoggedIn) {
        console.log('üöÄ Login exitoso');
        await saveCookies(page, username);
        return true;
      }
      console.warn('‚ö†Ô∏è Login fallido, reintentando...');
      delay *= 2;
      await new Promise(resolve => setTimeout(resolve, delay));
    } catch (error) {
      console.error(`‚ùå Error en login (intento ${attempt}):`, error.message);
      delay *= 2;
      await new Promise(resolve => setTimeout(resolve, delay));
    }
  }
  console.error('‚ùå Todos los intentos de login fallaron');
  return false;
}

// üîç Funci√≥n para realizar scraping de un perfil de Instagram
async function scrapeInstagram(page, username, encryptedPassword) {
  try {
    console.log(`üîç Scraping perfil de Instagram: ${username}`);

    // Verificar cache de scraping
    const cachedData = scrapeCache.get(username);
    if (cachedData && Date.now() - cachedData.timestamp
